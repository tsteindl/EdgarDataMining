data_raw$ret_7D
data_raw$outp_7D
setwd("~/WUTIS/WS21/FORM4DataRetrieval_R/Flo's code")
a = 1:3
b = 3:5
a - b
a-lead(b)
install.packages("SparkR")
SP500 = read.csv("IVV.csv")
head(SP500)
SP500$return = c(1,
SP500$Adj.Close[2:] / SP500[:nrow(SP500-1)])
a
a[2:]
SP500$return = c(1,
SP500$Adj.Close[2:nrow(SP500)] / SP500[1:nrow(SP500-1)])
SP500$return = c(1,
SP500$Adj.Close[2:nrow(SP500)] / SP500[1:(nrow(SP500)-1)])
SP500$return = c(1,
SP500$Adj.Close[2:nrow(SP500)] / SP500$Adj.Close[1:(nrow(SP500)-1)])
sp500$return
SP500$return
head(SP500)
SP500 = SP500[3:nrow(SP500),]
SP500$Date
format(SP500$Date, "%W")
format(as.date(SP500$Date), "%W")
format(as.Date(SP500$Date), "%W")
SP500$Week = format(as.Date(SP500$Date), "%W")
data_raw$Week = format(as.Date(data_raw$Transaction_date), "%W")
cbind(data_raw$Week, data_raw$Transaction_date)
data_raw$Transaction_date
View(data_raw$Week)
data_raw$Transaction_date[data_raw]
data_raw$Transaction_date[data_raw$Week == "00"]
data_raw$Transaction_date[data_raw$Week == "01"]
data_raw$Transaction_date[data_raw$Week == "02"]
unique(SP500$Week)
unique(data_raw$Week)
length(data_raw$Week)
length(unique(data_raw$Week))
length(unique(SP500$Week))
head(SP500)
head(data_raw)
data_raw$Week = format(as.Date(data_raw$report_date), "%W")
head(data_raw)
data = data_raw[!grepl("2018", data_raw$report_date), ]
head(data)
data = data_raw[!data_raw$Week %in% c("00", "53"), ]
head(data)
data = data_raw[!format(as.Date(data_raw$report_date), "%Y") == "2018", ]
head(data)
data = data[!data$Week %in% c("00", "53"), ]
data
data$Is_10._owner[is.na(data$Is_10._owner)] = 0
owner = data[data$Is_10._owner == 1, c("Is_10.owner", "Week", "ret_7D")]
owner = data[data$Is_10._owner == 1, c("Is_10.owner", "Week", "ret_7D")]
owner = data[data$Is_10._owner == 1, c("Is_10._owner", "Week", "ret_7D")]
head(owner)
owner$return = owner$ret_7D + 1
?tapply
returns = tapply(owner$return, INDEX = owner$Week, FUN = %*%)
returns = tapply(owner$return, INDEX = owner$Week, FUN = "%*%")
returns = tapply(owner$return, INDEX = owner$Week, FUN = prod)
returns
owner$return
data$Is_10._owner[is.na(data$Is_10._owner)] = 0
owner = data[data$Is_10._owner == 1, c("Is_10._owner", "Week", "ret_7D")]
owner$return = owner$ret_7D + 1
owner$return[is.na(owner$return)] = 1
head(owner)
returns = tapply(owner$return, INDEX = owner$Week, FUN = prod)
returns
option(scipen = 3)
options(scipen = 3)
returns
options(scipen = 1)
returns
returns[1]
returns = tapply(owner$return, INDEX = owner$Week, FUN = mean)
returns
head(SP500)
prod(SP500$return)
prod(owner$return)
prod(returns)
sp_performance = cumprod(SP500$return)
owner_performance
owner_performance = cumprod(returns)
owner_performance
sp_performance
plot()
matplot(cbind(sp_performance, owner_performance))
matplot(cbind(sp_performance, owner_performance), lty = c(1,1))
matplot(cbind(sp_performance, owner_performance), type = "l")
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1)
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "Performance")
matlines(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "Performance")
matlines(cbind(sp_performance, owner_performance), lty = 1,
ylab = "Performance")
legend(col = c("red", "black"), legend = c("owner", "SP500"))
legend(x = 1, col = c("red", "black"), legend = c("owner", "SP500"))
?legend
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"))
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500") lty = 1)
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
matlines(cbind(sp_performance, owner_performance), lty = 1,
ylab = "Performance")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
plot.new()
matlines(cbind(sp_performance, owner_performance), lty = 1,
ylab = "Performance")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
matlines(cbind(sp_performance, owner_performance), lty = 1,
ylab = "Performance")
plot.new()
matlines(cbind(sp_performance, owner_performance), lty = 1,
ylab = "Performance")
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "Performance")
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "Performance")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
prev_peak = cummax(owner_performance)
prev_peak
drawdown = prev_peak - owner_performance / prev_peak
drawdown
matplot(cbind(sp_performance, owner_performance, prev_peak), type = "l", lty = 1,
ylab = "Performance")
prev_peak
drawdown = (prev_peak - owner_performance) / prev_peak
drawdown
drawdown
mean(drawdown)
max(drawdown)
prev_peak_sp = cummax(sp_performance)
drawdown_sp = (prev_peak_sp - sp_performance) / prev_peak_sp
max(drawdown_sp)
mean(drawdown_sp)
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
data_raw = read.csv("2019.csv")
SP500 = read.csv("IVV.csv")
head(data_raw)
head(SP500)
SP500$return = c(1,
SP500$Adj.Close[2:nrow(SP500)] / SP500$Adj.Close[1:(nrow(SP500)-1)])
head(SP500)
SP500 = SP500[3:nrow(SP500),]
SP500$Week = format(as.Date(SP500$Date), "%W")
data_raw$Week = format(as.Date(data_raw$report_date), "%W")
data = data_raw[!format(as.Date(data_raw$report_date), "%Y") == "2018", ]
data = data[!data$Week %in% c("00", "53"), ]
### owner performance
data$Is_10._owner[is.na(data$Is_10._owner)] = 0
owner = data[data$Is_10._owner == 1, c("Is_10._owner", "Week", "ret_7D")]
owner$return = owner$ret_7D + 1
owner$return[is.na(owner$return)] = 1
head(owner)
returns = tapply(owner$return, INDEX = owner$Week, FUN = mean)
sp_performance = cumprod(SP500$return)
owner_performance = cumprod(returns)
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
### drawdown
prev_peak = cummax(owner_performance)
drawdown = (prev_peak - owner_performance) / prev_peak
drawdown
mean(drawdown)
max(drawdown)
prev_peak_sp = cummax(sp_performance)
drawdown_sp = (prev_peak_sp - sp_performance) / prev_peak_sp
mean(drawdown_sp)
max(drawdown_sp)
setwd("~/WUTIS/WS21/FORM4DataRetrieval_R/Flo's code")
data_raw = read.csv("2019.csv")
SP500 = read.csv("IVV.csv")
head(data_raw)
head(SP500)
SP500$return = c(1,
SP500$Adj.Close[2:nrow(SP500)] / SP500$Adj.Close[1:(nrow(SP500)-1)])
head(SP500)
SP500 = SP500[3:nrow(SP500),]
SP500$Week = format(as.Date(SP500$Date), "%W")
data_raw$Week = format(as.Date(data_raw$report_date), "%W")
data = data_raw[!format(as.Date(data_raw$report_date), "%Y") == "2018", ]
data = data[!data$Week %in% c("00", "53"), ]
### owner performance
data$Is_10._owner[is.na(data$Is_10._owner)] = 0
owner = data[data$Is_10._owner == 1, c("Is_10._owner", "Week", "ret_7D")]
owner$return = owner$ret_7D + 1
owner$return[is.na(owner$return)] = 1
head(owner)
returns = tapply(owner$return, INDEX = owner$Week, FUN = mean)
sp_performance = cumprod(SP500$return)
owner_performance = cumprod(returns)
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
### drawdown
prev_peak = cummax(owner_performance)
drawdown = (prev_peak - owner_performance) / prev_peak
drawdown
mean(drawdown)
max(drawdown)
prev_peak_sp = cummax(sp_performance)
drawdown_sp = (prev_peak_sp - sp_performance) / prev_peak_sp
mean(drawdown_sp)
max(drawdown_sp)
owner$ret_7D
owner_performance
riskfree = read.csv("TB4WK.csv")
riskfree
riskfree[1:(length(riskfree)-1)]
riskfree[1:(length(riskfree)-1), ]
1:(length(riskfree)-1)
riskfree[1:(nrow(riskfree)-1), ]
owner_performance
owner_performance ^ (1/12)
owner_performance[length(owner_performance)]  ^ (1/12)
monthly_excess_return = owner_performance[length(owner_performance)]  ^ (1/12) - prod(riskfree$TB4WK ^ (1/12))
monthly_excess_return
prod(riskfree$TB4WK ^ (1/12)
)
riskfree
riskfree$TB4WK / 100 + 1
monthly_excess_return = owner_performance[length(owner_performance)]  ^ (1/12) - prod(riskfree$TB4WK / 100 + 1 ^ (1/12))
monthly_excess_return
prod(riskfree$TB4WK / 100 + 1) ^ (1/12)
prod(riskfree$TB4WK / 100 + 1) ^ (1/12)
monthly_excess_return = owner_performance[length(owner_performance)] - prod(riskfree$TB4WK / 100 + 1)
monthly_excess_return
prod(riskfree$TB4WK / 100 + 1)
owner_performance
(owner_performance - 1)*100
(sp_performance - 1)*100
std(returns)
sd(returns)
sd(SP500$return)
returns
SP500$return
mean(drawdown)
max(drawdown)
mean(drawdown_sp)
max(drawdown_sp)
owner$return = owner$ret_7D + 1
owner$ret_7D
owner$return = owner$ret_7D + 1
owner$return[is.na(owner$return)] = 1
owner$return
mean(owner$return)
returns = tapply(owner$return, INDEX = owner$Week, FUN = mean)
returns
prod(returns)
mean(returns)^12
data_raw
colnames(data_raw)
data_raw$volume = data_raw$N_of_shares * data_raw$relevant_price
weights = data_raw$volume / sum(data_raw$volume)
weights
sum(is.na(data_raw$relevant_price))
sum(is.na(data_raw$N_of_shares))
weights = data_raw$volume / sum(data_raw$volume, na.rm = TRUE)
weights
nrow(data_raw)
length(weights)
head(owner)
length(unique(owner$Week))
1:10
length(1:10)
?mean
data_raw$volume = data_raw$N_of_shares * data_raw$relevant_price
weights = data_raw$volume / sum(data_raw$volume, na.rm = TRUE)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = data_raw$volume[owner$Week == unique(owner$Week)[i]]
temp_week_return = weighted.mean(temp_returns, temp_weights)
temp_week_return
}
i = 1
owner$return[owner$Week == unique(owner$Week)[i]]
data_raw$volume[owner$Week == unique(owner$Week)[i]]
data_raw = read.csv("2019.csv")
SP500 = read.csv("IVV.csv")
head(data_raw)
head(SP500)
SP500$return = c(1,
SP500$Adj.Close[2:nrow(SP500)] / SP500$Adj.Close[1:(nrow(SP500)-1)])
head(SP500)
SP500 = SP500[3:nrow(SP500),]
SP500$Week = format(as.Date(SP500$Date), "%W")
data_raw$Week = format(as.Date(data_raw$report_date), "%W")
data = data_raw[!format(as.Date(data_raw$report_date), "%Y") == "2018", ]
data = data[!data$Week %in% c("00", "53"), ]
### owner performance
data$Is_10._owner[is.na(data$Is_10._owner)] = 0
owner = data[data$Is_10._owner == 1, c("Is_10._owner", "Week", "ret_7D", "N_of_shares", "relevant_price")]
owner$return = owner$ret_7D + 1
owner$return[is.na(owner$return)] = 1
head(owner)
returns = tapply(owner$return, INDEX = owner$Week, FUN = mean)
sp_performance = cumprod(SP500$return)
owner_performance = cumprod(returns)
matplot(cbind(sp_performance, owner_performance), type = "l", lty = 1,
ylab = "")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
### drawdown
prev_peak = cummax(owner_performance)
drawdown = (prev_peak - owner_performance) / prev_peak
drawdown
mean(drawdown)
max(drawdown)
prev_peak_sp = cummax(sp_performance)
drawdown_sp = (prev_peak_sp - sp_performance) / prev_peak_sp
mean(drawdown_sp)
max(drawdown_sp)
### strategy 2
owner$volume = owner$N_of_shares * owner$relevant_price
weights = owner$volume / sum(owner$volume, na.rm = TRUE)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_week_return = weighted.mean(temp_returns, temp_weights)
temp_week_return
}
i=1
owner$return[owner$Week == unique(owner$Week)[i]]
owner$volume[owner$Week == unique(owner$Week)[i]]
weighted.mean(temp_returns, temp_weights)
temp_week_return = weighted.mean(temp_returns, temp_weights)
temp_week_return
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_week_return = weighted.mean(temp_returns, temp_weights)
temp_week_return
}
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_week_return = weighted.mean(temp_returns, temp_weights)
print(temp_week_return)
}
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
print(temp_week_return)
}
i=1
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
print(temp_week_return)
temp_returns
temp_weights
weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
weighted.mean(x = temp_returns, w = temp_weights, na.rm = TRUE)
weighted.mean(x = temp_returns, w = temp_weights, na.rm = TRUE)
?weighted.mean
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
print(temp_week_return)
}
returns_2 = rep(NA, 52)
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]] ^2
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]] ^0.5
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
summary(owner$volume)
quartile(owner$volume)
quantile(owner$volume)
quantile(owner$volume, na.rm = T)
upper = quantile(owner$volume, probs = 0.95)
upper = quantile(owner$volume, probs = 0.95, na.rm = T)
uper
upper
owner$volume = owner$N_of_shares * owner$relevant_price
upper = quantile(owner$volume, probs = 0.95, na.rm = T)
upper
owner$volume[owner$volume >= upper] = upper
owner$volume[owner$volume < 0] = 0
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]]
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
owner$volume = owner$N_of_shares * owner$relevant_price
upper = quantile(owner$volume, probs = 0.95, na.rm = T)
upper
owner$volume[owner$volume >= upper] = upper
owner$volume[owner$volume < 0] = 0
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = owner$volume[owner$Week == unique(owner$Week)[i]] ^0.5
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = log(owner$volume[owner$Week == unique(owner$Week)[i]])
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
owner$volume = owner$N_of_shares * owner$relevant_price
upper = quantile(owner$volume, probs = 0.95, na.rm = T)
upper
owner$volume[owner$volume >= upper] = upper
owner$volume[owner$volume < 1] = 1
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = log(owner$volume[owner$Week == unique(owner$Week)[i]], na.rm)
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
owner$volume = owner$N_of_shares * owner$relevant_price
upper = quantile(owner$volume, probs = 0.95, na.rm = T)
upper
owner$volume[owner$volume >= upper] = upper
owner$volume[owner$volume < 1] = 1
returns_2 = rep(NA, 52)
for (i in 1:52) {
temp_returns = owner$return[owner$Week == unique(owner$Week)[i]]
temp_weights = log(owner$volume[owner$Week == unique(owner$Week)[i]])
temp_weights[is.na(temp_weights)] = 0
temp_week_return = weighted.mean(temp_returns, temp_weights, na.rm = TRUE)
returns_2[i] = temp_week_return
}
prod(returns_2)
owner_performance_2 = cumprod(returns_2)
matplot(cbind(sp_performance, owner_performance_2), type = "l", lty = 1,
ylab = "")
legend(x = 1, y = 2.5, col = c("red", "black"), legend = c("owner", "SP500"), lty = 1)
### drawdown
prev_peak = cummax(owner_performance_2)
drawdown = (prev_peak - owner_performance_2) / prev_peak
drawdown
owner_performance_2
sd(owner_performance)
returns
sd(returns-1)
sd(returns_2-1)
sd(returns_2-1)
mean(drawdown)
max(drawdown)
matplot()
matplot(
sp_performance,
owner_performance,
owner_performance_2,
type = "l", lty = 1
)
matplot(cbind(
sp_performance,
owner_performance,
owner_performance_2),
type = "l", lty = 1
)
legend(x = 1, y = 2.5, legend = c("Strategy 2", "Strategy 1", "SP500"), col = c("green", "red", "black"))
legend(x = 1, y = 2.5, legend = c("Strategy 2", "Strategy 1", "SP500"), col = c("green", "red", "black"), lty = 1)
matplot(cbind(
sp_performance,
owner_performance,
owner_performance_2),
type = "l", lty = 1, ylab = ""
)
legend(x = 1, y = 2.5, legend = c("Strategy 2", "Strategy 1", "SP500"), col = c("green", "red", "black"), lty = 1)
write.csv(returns_2, file = "strategy_2_returns.csv")
returns_2
